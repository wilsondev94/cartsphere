datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hashedPassword String?
  accounts      Account[]
  orders         Order[]
  reviews Review[]
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Order{
  id             String  @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  amount Float
  currency String
  status String
  deliveryStatus String?
  createdDate DateTime @default(now())
  paymentIntentId String @unique
  products CartProductType[]
  address Address?
   
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  }

 model Product{
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    name String
    description String
    price Float
    category String
    brand String
    inStock Boolean
    images Image[]
    reviews Review[]
  }

model Review{
id                String  @id @default(auto()) @map("_id") @db.ObjectId
userId String @db.ObjectId
productId String @db.ObjectId
rating Int
comment String
createdAt DateTime @default(now())

product Product @relation(fields: [productId],references: [id])
user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

type CartProductType  {
  id String
  name String
  description String
  category String
  brand String
  quantity Int
  price Float
  selectedImg Image
  
}

type Image{
  color String
  colorCode String
  image String
}

type Address{
  city String
  state String
  country String
  line1 String 
  line2 String
  postalCode String

}

enum Role{
    USER
    ADMIN
}


